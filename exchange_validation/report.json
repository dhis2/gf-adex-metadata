{
  "reports": [
    {
      "name": "GF ADEx configuration validation",
      "created": "2023-10-27T09:28:40.210",
      "lastUpdated": "2023-10-30T09:27:26.183",
      "translations": [],
      "createdBy": {
        "id": "aEKn0GJvEYk",
        "code": null,
        "name": "Olav Poppe",
        "displayName": "Olav Poppe",
        "username": "olavpo"
      },
      "lastUpdatedBy": {
        "id": "aEKn0GJvEYk",
        "code": null,
        "name": "Olav Poppe",
        "displayName": "Olav Poppe",
        "username": "olavpo"
      },
      "sharing": {
        "owner": "aEKn0GJvEYk",
        "external": false,
        "users": {},
        "userGroups": {},
        "public": "rw------"
      },
      "type": "HTML",
      "designContent": "<style type=\"text/css\" media=\"screen\">\n\n/* Put your CSS styling here */\n\n</style>\n\n<script type=\"text/javascript\" src=\"https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js\"></script>\n<link rel=\"stylesheet\" href=\"https://cdn.datatables.net/1.13.6/css/jquery.dataTables.min.css\">\n\n<script type=\"text/javascript\">\n\n\tvar baseUrl = \"../api/\";\n\n\tvar indicators = false;\n\tvar indicatorsConf = {};\n\tvar indicatorsUnconf = {};\n\n\tvar exchanges = false;\n\n\tvar validationResults = {\n\t\t\"REQ_IND_DUPLICATED\": {\n\t\t\t\"title\": \"Requests with duplicate indicator ids\",\n\t\t\t\"instruction\": \"GF ADEx requests with the same indicator id repeated several times in the dx dimension. Review dx and remove any duplicates.\",\n\t\t\t\"headers\": [{\"title\": \"Request\"}],\n\t\t\t\"issues\": []\t\n\t\t},\n\t\t\"REQ_IND_UNCONF\": {\n\t\t\t\"title\": \"Requests with indicators that are not configured\",\n\t\t\t\"instruction\": \"GF ADEx requests that include indicators that are not configured, meaning their numerator is 0. These indicators should either configured, or removed from the request.\",\n\t\t\t\"headers\": [{\"title\": \"Request\"}, {\"title\": \"Indicator name\"}, {\"title\": \"Indicator id\"}],\n\t\t\t\"issues\": []\t\n\t\t},\n\t\t\"REQ_IND_NONGF\": {\n\t\t\t\"title\": \"Requests with other indicators\",\n\t\t\t\"instruction\": \"GF ADEx requests with indicators that are not GF ADEx indicators (i.e. do not have [GFADEX] prefix). Only GF ADEx indicators should be included in requests.\",\n\t\t\t\"headers\": [{\"title\": \"Request\"}, {\"title\": \"Indicator id\"}],\n\t\t\t\"issues\": []\t\n\t\t},\n\t\t\"REQ_PE_MIXED\": {\n\t\t\t\"title\": \"Requests with mixed period types\",\n\t\t\t\"instruction\": \"GF ADEx requests with mixed period types, i.e. the periods specified in the 'pe' dimension do not have the same periodicity. This should be changed so that only on period type is included in each request.\",\n\t\t\t\"headers\": [{\"title\": \"Request\"}, {\"title\": \"Request period\"}],\n\t\t\t\"issues\": []\t\n\t\t},\n\t\t\"REQ_PE_UNKNOWN\": {\n\t\t\t\"title\": \"Requests with unsupported period types\",\n\t\t\t\"instruction\": \"GF ADEx requests that include periods other than years, quarters or months, or where the period type could not be determined. Change these to one of the supported types.\",\n\t\t\t\"headers\": [{\"title\": \"Request\"}, {\"title\": \"Request period\"}],\n\t\t\t\"issues\": []\t\n\t\t},\n\t\t\"REQ_IND_PERIOD_CONFLICT\": {\n\t\t\t\"title\": \"Indicators in multiple requests with different period type\",\n\t\t\t\"instruction\": \"GF ADEx indicators can be included in multiple requests in some cases, but only if the requests have the same period type.\",\n\t\t\t\"headers\": [{\"title\": \"Indicator name\"}, {\"title\": \"Indicator id\"}, {\"title\": \"Request\"}],\n\t\t\t\"issues\": []\t\n\t\t},\n\t\t\"IND_CONF_IGNORED\": {\n\t\t\t\"title\": \"Indicators that are configured but not in requests\",\n\t\t\t\"instruction\": \"GF ADEx indicators that have been configured (numerator \u2260 0), but are not included in any GF ADEx requests.\",\n\t\t\t\"headers\": [{\"title\": \"Indicator name\"}, {\"title\": \"Indicator id\"}],\n\t\t\t\"issues\": []\t\n\t\t},\n\t\t\"IND_DENOM_CHANGED\": {\n\t\t\t\"title\": \"Indicators with modified denominator\",\n\t\t\t\"instruction\": \"GF ADEx indicators where the denominator has been changed from '1'. This should be reviewed, as all GF ADEx indicators should be reported as numbers only.\",\n\t\t\t\"headers\": [{\"title\": \"Indicator name\"}, {\"title\": \"Indicator id\"}, {\"title\": \"Denominator\"}],\n\t\t\t\"issues\": []\t\n\t\t}\n\t}\n\t\n\n\t//Fetch async from API\n\tasync function d2Fetch(endpoint) {\n\t\treturn new Promise(function (resolve, reject) {\n\t\t\t $.ajax({\n\t\t\t\t\"type\": \"GET\",\n\t\t\t\t\"url\": baseUrl + endpoint,\n\t\t\t\t\"dataType\": \"json\",\n\t\t\t\t\"success\": function (data) {\n\t\t\t\t\tresolve(data);\n\t\t\t\t},\n\t\t\t\t\"error\": function (err) {\n\t\t\t\t\tconsole.log(err)\n\t\t\t\t\treject(false);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\n\t//Fetch the GF indicators (based on [GFADEX] code in name)\n\tasync function fetchIndicators() {\n\t\tdata = await d2Fetch(\"indicators.json?filter=name:$like:[GFADEX]&fields=id,name,code,numerator,denominator&paging=false\");\n\t\tif (!data || data.indicators.length == 0) {\n\t\t\tconsole.log(\"No GF ADEx indicators found\");\n\t\t\treturn false;\n\t\t}\n\t\telse {\n\t\t\treturn data.indicators;\n\t\t}\n\t}\n\n\n\t//Fetch the GF exchanges (based on target server)\n\tasync function fetchExchanges() {\n\t\tdata = await d2Fetch(\"aggregateDataExchanges.json?filter=target.api.url:like:globalfund&fields=id,name,source[requests[*]],target[*]&paging=false\");\n\t\tif (!data || data.aggregateDataExchanges.length == 0) {\n\t\t\tconsole.log(\"No GF data exchanges found\");\t\n\t\t\treturn false;\n\t\t}\n\t\telse {\n\t\t\treturn data.aggregateDataExchanges;\n\t\t}\n\t}\n\n\n\t//Separate configured and non-configured indicators\n\tfunction indicatorsCategorize() {\n\t\t\n\t\tfor (var ind of indicators) {\n\t\t\tif (ind.numerator == \"0\") indicatorsUnconf[ind.id] = ind;\n\t\t\telse indicatorsConf[ind.id] = ind;\n\t\t}\n\t\t\n\t\tvar msg = Object.keys(indicatorsUnconf).length + \" not configured, \" + Object.keys(indicatorsConf).length + \" configured\";\n\t\tconsole.log(msg);\n\t}\n\t\n\t\n\t//Separate request dx by periodicity\n\tfunction findRequestPeriodInoncistenies() {\t\n\t\t//Loop over all requests and 1) look for period issues withing requests, 2) categories indicators by periodtype\n\t\tvar indicatorpTypes = {\n\t\t\t\"MONTHLY\": [],\n\t\t\t\"QUARTERLY\": [],\n\t\t\t\"YEARLY\": []\n\t\t};\n\t\tfor (var ex of exchanges) {\n\t\t\tfor (var req of ex.source.requests) {\n\t\t\t\tperiodType = identifyPerioditype(req.pe);\n\t\t\t\tif (periodType == \"UNKNOWN\") {\n\t\t\t\t\tvalidationResults[\"REQ_PE_UNKNOWN\"].issues.push([req.name, req.pe.join(\",\")]);\n\t\t\t\t}\n\t\t\t\telse if (periodType == \"MIXED\") {\n\t\t\t\t\tvalidationResults[\"REQ_PE_MIXED\"].issues.push([req.name, req.pe.join(\",\")]);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tindicatorpTypes[periodType] = indicatorpTypes[periodType].concat(req.dx);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvar allPtypes = [\"MONTHLY\", \"QUARTERLY\", \"YEARLY\"];\n\t\tfor (var i = 0; i < (allPtypes.length - 1); i++) {\n\t\t\tfor (var ind of indicatorpTypes[allPtypes[i]]) {\n\t\t\t\tfor (var j = i+1; j < allPtypes.length; j++) {\n\t\t\t\t\tfor (var otherInd of indicatorpTypes[allPtypes[j]]) {\n\t\t\t\t\t\tif (ind == otherInd) {\n\t\t\t\t\t\t\tvalidationResults[\"REQ_IND_PERIOD_CONFLICT\"].issues.push([indicatorName(ind), ind, requestsWithIndicator(ind).join(\", \")]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n\n\n\t//Find any duplicate UIDs within a single request\n\tfunction findDuplicatesInRequests() {\n\t\tfor (var ex of exchanges) {\n\t\t\tfor (var req of ex.source.requests) {\n\t\t\t\tif (req.dx.length != uniqueEntries(req.dx).length) {\n\t\t\t\t\tvalidationResults[\"REQ_IND_DUPLICATED\"].issues.push([req.name]);\n\t\t\t\t}\t\t\n\t\t\t}\n\t\t}\n\t}\n\n\n\t//Find unconfigured indicators in requests\n\tfunction findUnconfiguredInRequests() {\n\t\tfor (var ex of exchanges) {\n\t\t\tfor (var req of ex.source.requests) {\n\t\t\t\tfor (var ind of req.dx) {\n\t\t\t\t\tif (indicatorsUnconf[ind]) {\n\t\t\t\t\t\tvalidationResults[\"REQ_IND_UNCONF\"].issues.push([req.name, indicatorsUnconf[ind].name, ind]);\n\t\t\t\t\t}\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\n\t//Find configured indicators NOT in requests\n\tfunction findConfiguredNotInRequests() {\n\t\tfor (var confInd in indicatorsConf) {\n\t\t\tvar found = false\n\t\t\tfor (var ex of exchanges) {\n\t\t\t\tfor (var req of ex.source.requests) {\n\t\t\t\t\tif ($.inArray(confInd, req.dx) !== -1) found = true\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!found)\tvalidationResults[\"IND_CONF_IGNORED\"].issues.push([indicatorsConf[confInd].name, indicatorsConf[confInd].id]);\n\t\t}\n\t}\n\t\n\t\n\t//Find non-GF indicators in request\n\tfunction findNonGFInRequests() {\n\t\tfor (var ex of exchanges) {\n\t\t\tfor (var req of ex.source.requests) {\n\t\t\t\tfor (var ind of req.dx) {\n\t\t\t\t\tif (!indicatorsUnconf.hasOwnProperty(ind) && !indicatorsConf.hasOwnProperty(ind)) {\n\t\t\t\t\t\tvalidationResults[\"REQ_IND_NONGF\"].issues.push([req.name, ind]);\n\t\t\t\t\t}\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\n\t//Find indicators with denominator != 1\n\tfunction findChangedDenominators() {\n\t\tfor (var ind of indicators) {\n\t\t\tif (ind.denominator != \"1\") {\n\t\t\t\tvalidationResults[\"IND_DENOM_CHANGED\"].issues.push([ind.name, ind.id, ind.denominator]);\n\t\t\t}\n\t\t}\n\t}\n\t\n\n\t//Compare ID/code/attributes with current master on GH?\n\t\n\t//Get name of indicator from id\n\tfunction indicatorName(id) {\n\t\tfor (var ind of indicators) {\n\t\t\tif (ind.id == id) return ind.name;\n\t\t}\n\t\treturn \"UNKNOWN\";\n\t}\n\n\t\n\t//Figure out period type from request pe dimension\n\t//Returns false is a mix of periodTypes are found\n\t//Year, quarter, month, week supported - else false\n\tfunction identifyPerioditype(pe) {\t\n\t\tvar periodType = false, latestPeriodType = false;\n\t\tfor (var p of pe) {\n\t\t\tif (p.length == 4 || p.endsWith(\"_YEARS\") || p.endsWith(\"_YEAR\")) {\n\t\t\t\tlatestPeriodType = \"YEARLY\";\n\t\t\t}\n\t\t\telse if (p.indexOf(\"Q\") == 4 || p.endsWith(\"_QUARTERS\") || p.endsWith(\"_QUARTER\")) {\n\t\t\t\tlatestPeriodType = \"QUARTERLY\";\n\t\t\t}\n\t\t\telse if (p.length == 6 || p.endsWith(\"_MONTHS\") || p.endsWith(\"_MONTH\")) {\n\t\t\t\tlatestPeriodType = \"MONTHLY\";\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconsole.log(\"Unknown period type: \" + p);\n\t\t\t\treturn \"UNKNOWN\";\n\t\t\t}\n\t\t\t\t\n\t\t\t//First iteration only\n\t\t\tif (!periodType) periodType = latestPeriodType;\n\t\t\t\n\t\t\t//Return if periods are mixed\n\t\t\tif (periodType != latestPeriodType) return \"MIXED\";\n\t\t}\n\n\t\treturn periodType;\n\t}\n\n\tfunction requestsWithIndicator(indicatorId) {\n\t\tvar requests = [];\n\t\tfor (var ex of exchanges) {\n\t\t\tfor (var req of ex.source.requests) {\n\t\t\t\tif ($.inArray(indicatorId, req.dx) >= 0) requests.push(req.name);\n\t\t\t}\n\t\t}\n\t\treturn requests;\n\n\t}\n\t\n\t\n\tfunction uniqueEntries(array) {\n\t\treturn $.grep(array, function(el, index) {\n\t\t\treturn index == $.inArray(el, array);\n\t\t});\n\t}\n\t\n\t\n\t//Add results to report\n\tfunction printValidationResults() {\n\n\t\t//Make summary\n\t\tvar html = \"<h2>Summary</h2>\";\n\t\tvar html = html + \"<table id='summary' class='display' width='100%'>\";\n\t\thtml = html + \"<thead><tr><th>Validation check</th><th>Result</th></tr></thead><tbody>\";\n\t\tfor (var validationType in validationResults) {\n\t\t\tvar result = validationResults[validationType];\n\t\t\thtml = html + \"<tr><td>\" + result.title + \"</td>\";\n\t\t\tif (result.issues.length > 0) {\n\t\t\t\thtml = html + \"<td>\" + result.issues.length + \" issues</td></tr>\";\n\t\t\t}\n\t\t\telse {\n\t\t\t\thtml = html + \"<td>OK</td></tr>\";\n\t\t\t}\n\t\t}\n\t\thtml = html + \"</tbody></table>\"\n\t\t$(\"#result\").append(html);\n\t\tnew DataTable(\"#summary\", {\"paging\": false, \"searching\": false});\n\n\t\t//Make detailed tables\n\t\tfor (var validationType in validationResults) {\n\t\t\tvar result = validationResults[validationType];\n\t\t\t\n\n\t\t\tif (result.issues.length > 0) {\n\t\t\t\tvar html = \"<h2>\" + result.title + \"</h2>\";\n\t\t\t\thtml = html + \"<p>\" + result.instruction + \"</p>\";\n\t\t\t\thtml = html + \"<table id='\" + validationType + \"' class='display' width='100%'></table>\";\n\t\t\t\t$(\"#result\").append(html);\t\n\t\t\t\t\n\t\t\t\tnew DataTable(\"#\" + validationType, {\n\t\t\t\t\tcolumns: result.headers,\n\t\t\t\t\tdata: result.issues\n\t\t\t\t});\n\t\t\t}\t\n\t\t}\t\n\t}\n\t\n\n\tasync function runValidation() {\n\t\tconsole.log(\"Starting validation\");\n\t\t\n\t\t//Get the stuff to validate\n\t\tindicators = await fetchIndicators();\n\t\texchanges = await fetchExchanges();\n\t\tif (indicators && exchanges) console.log(\"Fetched indicators and exchanges\");\n\t\telse return;\n\t\t\n\t\tindicatorsCategorize();\n\t\tfindDuplicatesInRequests();\n\t\tfindUnconfiguredInRequests();\n\t\tfindConfiguredNotInRequests();\n\t\tfindNonGFInRequests();\n\t\tfindChangedDenominators();\n\t\tfindRequestPeriodInoncistenies();\n\t\t\n\t\tprintValidationResults();\n\t\t\n\t\tconsole.log(\"Finished validation\");\n\t}\n\t\n\t\n\t\n\t$( document ).ready( function() {\n\t\trunValidation();\n\t});\n\n</script>\n\n<div>\n\t<h1>GF ADEx configuration validation</h1>\n\t<div id=\"result\"></div>\n</div>\n",
      "cacheStrategy": "NO_CACHE",
      "reportParams": {
        "grandParentOrganisationUnit": false,
        "parentOrganisationUnit": false,
        "organisationUnit": false,
        "reportingPeriod": false
      },
      "id": "c6LcRcxTmIz",
      "relativePeriods": {
        "thisDay": false,
        "yesterday": false,
        "last3Days": false,
        "last7Days": false,
        "last14Days": false,
        "last30Days": false,
        "last60Days": false,
        "last90Days": false,
        "last180Days": false,
        "thisMonth": false,
        "lastMonth": false,
        "thisBimonth": false,
        "lastBimonth": false,
        "thisQuarter": false,
        "lastQuarter": false,
        "thisSixMonth": false,
        "lastSixMonth": false,
        "weeksThisYear": false,
        "monthsThisYear": false,
        "biMonthsThisYear": false,
        "quartersThisYear": false,
        "thisYear": false,
        "monthsLastYear": false,
        "quartersLastYear": false,
        "lastYear": false,
        "last5Years": false,
        "last10Years": false,
        "last12Months": false,
        "last6Months": false,
        "last3Months": false,
        "last6BiMonths": false,
        "last4Quarters": false,
        "last2SixMonths": false,
        "thisFinancialYear": false,
        "lastFinancialYear": false,
        "last5FinancialYears": false,
        "last10FinancialYears": false,
        "thisWeek": false,
        "lastWeek": false,
        "thisBiWeek": false,
        "lastBiWeek": false,
        "last4Weeks": false,
        "last4BiWeeks": false,
        "last12Weeks": false,
        "last52Weeks": false
      }
    }
  ]
}